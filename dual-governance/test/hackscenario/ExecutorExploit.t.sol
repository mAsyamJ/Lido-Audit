// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.26;

import "forge-std/Test.sol";
import {Executor} from "contracts/Executor.sol";

/// @notice Malicious contract used by the attacker to test reentrancy or arbitrary execution
contract AttackerReceiver {
    event FallbackTriggered(address sender, uint256 value, bytes data);

    /// @notice Fallback function to log unexpected ETH transfers
    receive() external payable {
        emit FallbackTriggered(msg.sender, msg.value, msg.data);
    }

    /// @notice Simulates a malicious function that could be executed via Executor
    function maliciousLogic() external payable {
        emit FallbackTriggered(msg.sender, msg.value, msg.data);
    }
}

/// @notice Exploit test for the Executor contract simulating a hijacked owner scenario
contract ExecutorExploitTest is Test {
    Executor private executor;
    address private deployer;
    address private attacker;
    AttackerReceiver private attackerContract;

    function setUp() public {
        deployer = address(this);
        attacker = vm.addr(1337);

        // Deploy the Executor contract with this test contract as the initial owner
        executor = new Executor(deployer);

        // Deploy a malicious contract controlled by the attacker
        attackerContract = new AttackerReceiver();

        // Simulate a vulnerability where ownership is mistakenly transferred to an attacker
        executor.transferOwnership(attacker);
        assertEq(executor.owner(), attacker, "Ownership transfer failed");
    }

    function testExploit_ExecuteMaliciousCall() public {
        vm.startPrank(attacker);

        // Prepare calldata for the malicious function
        bytes memory payload = abi.encodeWithSignature("maliciousLogic()");

        // Call Executor with 1 ETH and malicious payload targeting attacker's contract
        executor.execute{value: 1 ether}(address(attackerContract), 1 ether, payload);

        vm.stopPrank();
    }

    // Allow receiving ETH in the test contract
    receive() external payable {}
}
