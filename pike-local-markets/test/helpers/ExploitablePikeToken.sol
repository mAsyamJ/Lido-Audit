// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.28;

import {PTokenModule} from "@modules/pToken/PTokenModule.sol";
import {IRiskEngine} from "@interfaces/IRiskEngine.sol";
import {PTokenStorage} from "@storage/PTokenStorage.sol";
import {RiskEngineStorage} from "@storage/RiskEngineStorage.sol";

contract ExploitablePikeToken is PTokenModule {
    constructor() {}

    function exposeMaxWithdraw(address account) external view returns (uint256) {
        return super.maxWithdraw(account); // gunakan super jika internal
    }

    function exploitWithdraw(address account, uint256 amount) external {
        super._withdraw(account, account, amount); // gunakan super jika internal
    }

    function setBalance(address account, uint256 amount) external {
        PTokenStorage.Layout storage l = PTokenStorage.layout();
        l.balanceOf[account] = amount;
    }

    function setTotalSupply(uint256 supply) external {
        PTokenStorage.layout().totalSupply = supply;
    }

    function spoofRiskEngine(IRiskEngine fakeRisk) external {
        RiskEngineStorage.layout().riskEngine = fakeRisk;
    }
}
